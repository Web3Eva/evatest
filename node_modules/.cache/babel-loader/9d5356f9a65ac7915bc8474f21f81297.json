{"ast":null,"code":"import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport var bigInt = function bigInt(length) {\n  return function (property) {\n    var layout = blob(length, property);\n\n    var _encodeDecode = encodeDecode(layout),\n        encode = _encodeDecode.encode,\n        decode = _encodeDecode.decode;\n\n    var bigIntLayout = layout;\n\n    bigIntLayout.decode = function (buffer, offset) {\n      var src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = function (bigInt, buffer, offset) {\n      var src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n};\nexport var bigIntBE = function bigIntBE(length) {\n  return function (property) {\n    var layout = blob(length, property);\n\n    var _encodeDecode2 = encodeDecode(layout),\n        encode = _encodeDecode2.encode,\n        decode = _encodeDecode2.decode;\n\n    var bigIntLayout = layout;\n\n    bigIntLayout.decode = function (buffer, offset) {\n      var src = decode(buffer, offset);\n      return toBigIntBE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = function (bigInt, buffer, offset) {\n      var src = toBufferBE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n};\nexport var u64 = bigInt(8);\nexport var u64be = bigIntBE(8);\nexport var u128 = bigInt(16);\nexport var u128be = bigIntBE(16);\nexport var u192 = bigInt(24);\nexport var u192be = bigIntBE(24);\nexport var u256 = bigInt(32);\nexport var u256be = bigIntBE(32);","map":{"version":3,"sources":["../../src/bigint.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAA6B,uBAA7B;AACA,SAAS,UAAT,EAAqB,UAArB,EAAiC,UAAjC,EAA6C,UAA7C,QAA+D,eAA/D;AACA,SAAS,YAAT,QAA6B,YAA7B;AAEA,OAAO,IAAM,MAAM,GACf,SADS,MACT,CAAC,MAAD;EAAA,OACA,UAAC,QAAD,EAAsC;IAClC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAD,EAAS,QAAT,CAAnB;;IACA,oBAA2B,YAAY,CAAC,MAAD,CAAvC;IAAA,IAAQ,MAAR,iBAAQ,MAAR;IAAA,IAAgB,MAAhB,iBAAgB,MAAhB;;IAEA,IAAM,YAAY,GAAG,MAArB;;IAEA,YAAY,CAAC,MAAb,GAAsB,UAAC,MAAD,EAAiB,MAAjB,EAAmC;MACrD,IAAM,GAAG,GAAG,MAAM,CAAC,MAAD,EAAS,MAAT,CAAlB;MACA,OAAO,UAAU,CAAC,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAD,CAAjB;IACH,CAHD;;IAKA,YAAY,CAAC,MAAb,GAAsB,UAAC,MAAD,EAAiB,MAAjB,EAAiC,MAAjC,EAAmD;MACrE,IAAM,GAAG,GAAG,UAAU,CAAC,MAAD,EAAS,MAAT,CAAtB;MACA,OAAO,MAAM,CAAC,GAAD,EAAM,MAAN,EAAc,MAAd,CAAb;IACH,CAHD;;IAKA,OAAO,YAAP;EACH,CAlBD;AAAA,CADG;AAqBP,OAAO,IAAM,QAAQ,GACjB,SADS,QACT,CAAC,MAAD;EAAA,OACA,UAAC,QAAD,EAAsC;IAClC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAD,EAAS,QAAT,CAAnB;;IACA,qBAA2B,YAAY,CAAC,MAAD,CAAvC;IAAA,IAAQ,MAAR,kBAAQ,MAAR;IAAA,IAAgB,MAAhB,kBAAgB,MAAhB;;IAEA,IAAM,YAAY,GAAG,MAArB;;IAEA,YAAY,CAAC,MAAb,GAAsB,UAAC,MAAD,EAAiB,MAAjB,EAAmC;MACrD,IAAM,GAAG,GAAG,MAAM,CAAC,MAAD,EAAS,MAAT,CAAlB;MACA,OAAO,UAAU,CAAC,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAD,CAAjB;IACH,CAHD;;IAKA,YAAY,CAAC,MAAb,GAAsB,UAAC,MAAD,EAAiB,MAAjB,EAAiC,MAAjC,EAAmD;MACrE,IAAM,GAAG,GAAG,UAAU,CAAC,MAAD,EAAS,MAAT,CAAtB;MACA,OAAO,MAAM,CAAC,GAAD,EAAM,MAAN,EAAc,MAAd,CAAb;IACH,CAHD;;IAKA,OAAO,YAAP;EACH,CAlBD;AAAA,CADG;AAqBP,OAAO,IAAM,GAAG,GAAG,MAAM,CAAC,CAAD,CAAlB;AAEP,OAAO,IAAM,KAAK,GAAG,QAAQ,CAAC,CAAD,CAAtB;AAEP,OAAO,IAAM,IAAI,GAAG,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,IAAM,MAAM,GAAG,QAAQ,CAAC,EAAD,CAAvB;AAEP,OAAO,IAAM,IAAI,GAAG,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,IAAM,MAAM,GAAG,QAAQ,CAAC,EAAD,CAAvB;AAEP,OAAO,IAAM,IAAI,GAAG,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,IAAM,MAAM,GAAG,QAAQ,CAAC,EAAD,CAAvB","sourceRoot":"","sourcesContent":["import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map"]},"metadata":{},"sourceType":"module"}